{"version":3,"sources":["components/Converter.js","components/VideoBlock.js","pages/VideoPage.js"],"names":["Converter","convertMoviesToTiles","movies","map","m","id","title","original_title","desc","tagline","banner","backdrop_path","type","convertShowsToTiles","name","overview","convertToTile","watchable","VideoBlock","data","isLoading","history","useHistory","className","style","backgroundImage","onClick","goBack","VideoPage","useParams","setFeedback","useSetRecoilState","feedbackState","useQuery","a","fetch","res","json","error","isVisible","message"],"mappings":"8IAAMA,E,kCAAAA,EACEC,qBAAuB,SAACC,GAC9B,OAAOA,EAAOC,KAAI,SAAAC,GACjB,MAAO,CAACC,GAAID,EAAEC,GAAIC,MAAOF,EAAEG,eAAgBC,KAAMJ,EAAEK,QAASC,OAAQN,EAAEO,cAAeC,KAAM,aAHxFZ,EAOEa,oBAAsB,SAACX,GAC7B,OAAOA,EAAOC,KAAI,SAAAC,GACjB,MAAO,CAACC,GAAID,EAAEC,GAAIC,MAAOF,EAAEU,KAAMN,KAAMJ,EAAEW,SAAUL,OAAQN,EAAEO,cAAeC,KAAM,UAT/EZ,EAaEgB,cAAgB,SAACJ,EAAMK,GAC7B,MAAO,CAACZ,GAAIY,EAAUZ,GAAIC,MAAgB,OAATM,EAAgBK,EAAUH,KAAOG,EAAUV,eAAgBC,KAAe,OAATI,EAAgBK,EAAUF,SAAWE,EAAUR,QAASC,OAAQO,EAAUN,cAAeC,KAAMA,EAAMG,SAAUE,EAAUF,WAI9Mf,O,kJCeAkB,MA7Bf,YAA0C,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,UACpBC,EAAUC,cAEhB,OAAIF,EAAkB,yBAAKG,UAAU,2BAGnC,yBAAKA,UAAU,UACb,yBACEA,UAAU,aACVC,MACEL,EACI,CACEM,gBAAgB,0CAAD,OAA4CN,EAAKT,OAAjD,MAEjB,KAGR,yBAAKa,UAAU,kBACf,yBAAKA,UAAU,kBACf,yBAAKA,UAAU,mBAAf,eACc,wBAAIA,UAAU,iBAAiBJ,EAAOA,EAAKb,MAAQ,KAEjE,0BAAMoB,QAASL,EAAQM,OAAQJ,UAAU,iBAAzC,U,gCCMSK,UAvBf,WAAsB,IAAD,EACEC,cAAbxB,EADW,EACXA,GAAIO,EADO,EACPA,KACNkB,EAAcC,YAAkBC,KAFnB,EAIgBC,YAAS,QAAD,sBAAU,8BAAAC,EAAA,sEACjCC,MAAM,gCAAD,OACWvB,EADX,YACmBP,EADnB,8CAD4B,cAC7C+B,EAD6C,gBAIhCA,EAAIC,OAJ4B,cAI7ClB,EAJ6C,yBAK5CnB,IAAUgB,cAAcJ,EAAMO,IALc,4CAA7CA,EAJW,EAIXA,KAAMC,EAJK,EAILA,UAYd,OAhBmB,EAIMkB,OASvBR,EAAY,CAAES,WAAW,EAAMC,QAAS,+BAIxC,yBAAKjB,UAAU,UACb,kBAAC,EAAD,CAAYJ,KAAMA,EAAMC,UAAWA","file":"static/js/7.ac527954.chunk.js","sourcesContent":["class Converter {\n\tstatic convertMoviesToTiles = (movies) => {\n\t\treturn movies.map(m => {\n\t\t\treturn {id: m.id, title: m.original_title, desc: m.tagline, banner: m.backdrop_path, type: 'movie'}\n\t\t})\n\t}\n\n\tstatic convertShowsToTiles = (movies) => {\n\t\treturn movies.map(m => {\n\t\t\treturn {id: m.id, title: m.name, desc: m.overview, banner: m.backdrop_path, type: 'tv'}\n\t\t})\n\t}\n\n\tstatic convertToTile = (type, watchable) => {\n\t\treturn {id: watchable.id, title: type === 'tv' ? watchable.name : watchable.original_title, desc: type === 'tv' ? watchable.overview : watchable.tagline, banner: watchable.backdrop_path, type: type, overview: watchable.overview}\n\t}\n}\n\nexport default Converter\n","import React from \"react\";\nimport \"./VideoBlock.css\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction VideoBlock({ data, isLoading }) {\n  const history = useHistory();\n\n  if (isLoading) return <div className=\"vblock vblock--loading\"></div>;\n\n  return (\n    <div className=\"vblock\">\n      <div\n        className=\"vblock__bg\"\n        style={\n          data\n            ? {\n                backgroundImage: `url(https://image.tmdb.org/t/p/original${data.banner})`,\n              }\n            : {}\n        }\n      ></div>\n      <div className=\"vblock__bover\"></div>\n      <div className=\"vblock__tover\"></div>\n      <div className=\"vblock__playing\">\n        Now playing <h1 className=\"vblock__title\">{data ? data.title : \"\"}</h1>\n      </div>\n      <span onClick={history.goBack} className=\"vblock__close\">\n        Ã—\n      </span>\n    </div>\n  );\n}\n\nexport default VideoBlock;\n","import React from \"react\";\nimport \"./VideoPage.css\";\nimport VideoBlock from \"../components/VideoBlock.js\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuery } from \"react-query\";\nimport { useSetRecoilState } from \"recoil\";\nimport feedbackState from \"../atoms/feedbackState.js\";\nimport Converter from \"../components/Converter.js\";\n\nfunction VideoPage() {\n  const { id, type } = useParams();\n  const setFeedback = useSetRecoilState(feedbackState);\n\n  const { data, isLoading, error } = useQuery(\"video\", async () => {\n    const res = await fetch(\n      `https://api.themoviedb.org/3/${type}/${id}?api_key=bd7686376aa170d6af7fce5aee732f55`\n    );\n    const data = await res.json();\n    return Converter.convertToTile(type, data);\n  });\n\n  if (error) {\n    setFeedback({ isVisible: true, message: \"Oops, something went wrong\" });\n  }\n\n  return (\n    <div className=\"videop\">\n      <VideoBlock data={data} isLoading={isLoading} />\n    </div>\n  );\n}\n\nexport default VideoPage;\n"],"sourceRoot":""}